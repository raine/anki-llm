/**
 * Suggests a short key name for an Anki field.
 * Examples: "English" -> "en", "Japanese" -> "jp"
 */
export function suggestKeyForField(fieldName: string): string {
  const lower = fieldName.toLowerCase();

  // Common mappings
  const commonMappings: Record<string, string> = {
    english: 'en',
    japanese: 'jp',
    kanji: 'kanji',
    furigana: 'furigana',
    romaji: 'rom',
    context: 'context',
    notes: 'note',
    translation: 'translation',
    front: 'front',
    back: 'back',
    example: 'example',
    meaning: 'meaning',
  };

  if (commonMappings[lower]) {
    return commonMappings[lower];
  }

  // Default: take first 2-3 letters
  if (fieldName.length <= 3) {
    return lower;
  } else if (fieldName.length <= 6) {
    return lower.substring(0, 3);
  } else {
    return lower.substring(0, 4);
  }
}

/**
 * Given an array of suggested keys, resolves duplicates by appending numbers.
 * Example: ['a', 'b', 'a'] -> ['a', 'b', 'a2']
 */
export function resolveDuplicateKeys(keys: string[]): string[] {
  const keyCounts: Record<string, number> = {};
  return keys.map((key) => {
    const count = keyCounts[key] || 0;
    keyCounts[key] = count + 1;
    if (count > 0) {
      return `${key}${count + 1}`; // e.g., exp, exp2, exp3
    }
    return key;
  });
}

/**
 * Checks if a field value is likely auto-generated (e.g., a sound file).
 */
export function isAutoGeneratedField(value: string): boolean {
  return /^\[sound:.*\]$/.test(value.trim());
}
